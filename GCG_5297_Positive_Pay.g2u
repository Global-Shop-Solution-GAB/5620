Program.Sub.ScreenSU.Start
Gui.Form..create
Gui.Form..caption("SPX Positive Pay - JP Morgan")
Gui.Form..size(8100,10710)
Gui.Form..position(0,0)
Gui.Form..event(UnLoad,Form_UnLoad)
Gui.Form..forecolor(0)
Gui.Form..BackColor(-2147483633)
Gui.Form..mousepointer(0)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form.dpDate.create(datepicker)
Gui.Form.dpDate.size(1935,285)
Gui.Form.dpDate.position(75,420)
Gui.Form.dpDate.defaultvalue("")
Gui.Form.cmdOK.create(button)
Gui.Form.cmdOK.caption("OK")
Gui.Form.cmdOK.size(855,375)
Gui.Form.cmdOK.position(60,1455)
Gui.Form.cmdOK.event(Click,cmdOK_Click)
Gui.Form.cmdOK.defaultvalue("")
Gui.Form.lbl1.Create(Label,"Select Date",True,1035,255,0,60,195,True,0,"Arial",8,-2147483633,0)
Gui.Form.txtExportFolder.Create(TextBox,"",True,5580,300,0,75,1065,True,0,"Arial",8,-2147483643,1)
Gui.Form.lbl2.Create(Label,"Export Folder",True,1215,255,0,60,855,True,0,"Arial",8,-2147483633,0)
Gui.Form.cmdBrowseExportFolder.Create(Button)
Gui.Form.cmdBrowseExportFolder.Size(570,375)
Gui.Form.cmdBrowseExportFolder.Position(5745,1020)
Gui.Form.cmdBrowseExportFolder.Caption("^")
Gui.Form.cmdBrowseExportFolder.Event(Click,cmdBrowseExportFolder_Click)
Gui.Form.lbl3.Create(Label,"Courrier Code",True,1155,255,0,2070,195,True,0,"Arial",8,-2147483633,0)
Gui.Form.txtCourcode.Create(TextBox,"USPS",True,1005,300,0,2115,405,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtCourcode.MaxLength(8)
Gui.Form.txtBankAccount.Create(TextBox,"6301452011509",True,1830,300,0,3240,405,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtBankAccount.DefaultValue("")
Gui.Form.txtBankAccount.MaxLength(17)
Gui.Form.lbl4.Create(Label,"Bank Account",True,1275,255,0,3240,195,True,0,"Arial",8,-2147483633,0)
Gui.Form.gsCustom.Create(GsGridControl)
Gui.Form.gsCustom.Size(7800,7815)
Gui.Form.gsCustom.Position(75,1905)
Gui.Form.cmdRun.Create(Button)
Gui.Form.cmdRun.Enabled(False)
Gui.Form.cmdRun.Size(855,375)
Gui.Form.cmdRun.Position(45,9795)
Gui.Form.cmdRun.Caption("Run")
Gui.Form.cmdRun.DefaultValue("")
Gui.Form.cmdRun.Event(Click,cmdRun_Click)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global.sPrefixCheck.Declare
Program.Sub.Preflight.End

Program.Sub.Main.Start
'BN, Dec 2, 2018
'Customer: SPX
'This project will generate a csv positive pay with JP Morgan bank
'User can overwrite the Courrier Code
'Invoice note is pulled from V_AP_INVC_NOTES that will populate the Description field of the Remittance section

f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sDefaultfolder.Declare
	v.Local.bExist.Declare
	
	F.Odbc.Connection!Conx.OpenCompanyConnection
	
	'Default Positive Pay folder that store the csv output file.
	f.Intrinsic.String.Build("{0}\Custom\PosPay_JP",v.Caller.BusintDir,v.Local.sDefaultfolder)
	f.Intrinsic.File.DirExists(v.Local.sDefaultfolder,v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDefaultfolder)
	f.Intrinsic.Control.EndIf
	
	gui.Form.txtExportFolder.Text(v.Local.sDefaultfolder)
	gui.Form..Show

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.cmdOK_Click.Start
'Verify if there are checks for the selected date. If yes, show the grid for the user to overwrite the courrier code
f.Intrinsic.Control.Try	
	V.Local.sError.Declare
	v.Local.sSQL.Declare
	v.Local.bExist.Declare
	V.Local.sDateSelected.Declare
	
	f.Intrinsic.Control.If(v.Caller.CompanyCode,=,"SVC")
		v.Global.sPrefixCheck.Set("6")
	f.Intrinsic.Control.ElseIf(v.Caller.CompanyCode,=,"HVS")
		v.Global.sPrefixCheck.Set("5")	
	f.Intrinsic.Control.EndIf
	
	'Check Export Folder
	f.Intrinsic.File.DirExists(v.Screen.Form!txtExportFolder.Text.Trim,v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.Intrinsic.UI.Msgbox("Export Folder does not exist")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.UI.InvokeWaitDialog("Processing...")
	gui.Form..Visible(false)
	
	'format date
	F.Intrinsic.String.Format(V.Screen.Form!dpDate.Value,"YYYY-MM-DD",V.Local.sDateSelected)	
	
	'select data for correct date and account number
	F.intrinsic.string.Build("select Ck_Date, '{0}' + right('000000000' + Ck_No,9) as Check_Num,CK_No,Payee , Amount, Vend_No from V_CHECKS_LOG where CK_DATE= '{1}' and Ck_Or_Void = 'C' order by CK_NO",v.Global.sPrefixCheck,v.Local.sDateSelected,V.Local.sSQL)
	f.Intrinsic.Control.If(v.DataTable.PreT.Exists)
		f.Data.DataTable.Close("PreT")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("PreT","conx",v.Local.sSQL,True)	
	f.Intrinsic.Control.If(v.DataTable.PreT.RowCount,=,0)
		f.Intrinsic.UI.Msgbox("No checks to export")	
		f.Intrinsic.UI.CloseWaitDialog
		gui.Form..Show
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Data.DataTable.AddColumn("PreT","CourrierCode","String",v.Screen.Form!txtCourcode.Text.Trim)
	f.Data.DataTable.AddColumn("PreT","Exclude","Boolean",False)
	
	f.Intrinsic.UI.CloseWaitDialog
	gui.Form.gsCustom.AddGridviewFromDatatable("GVMain","PreT")
	'General format
	Gui.Form.gsCustom.SetGridViewProperty("GVMain","AllowSort",True)
	Gui.Form.gsCustom.SetGridViewProperty("GVMain","AllowFilter",True)
	Gui.Form.gsCustom.SetGridViewProperty("GVMain","OptionsFindAlwaysVisible",True)
	Gui.Form.gsCustom.SetGridViewProperty("GVMain","OptionsViewShowAutoFilterRow",True)
	'Invisible
	gui.Form.gsCustom.SetColumnProperty("GVMain","CK_No","Visible",False)
	'Column format	
	gui.Form.gsCustom.SetColumnProperty("GVMain","CourrierCode","AllowEdit",True)
	gui.Form.gsCustom.SetColumnProperty("GVMain","CourrierCode","ReadOnly",False)
	gui.Form.gsCustom.SetColumnProperty("GVMain","Exclude","AllowEdit",True)
	gui.Form.gsCustom.SetColumnProperty("GVMain","Exclude","ReadOnly",False)
	'Width
	gui.Form.gsCustom.SetColumnProperty("GVMain","Vend_No","Width","40")
	gui.Form.gsCustom.SetColumnProperty("GVMain","CourrierCode","Width","65")
	gui.Form.gsCustom.SetColumnProperty("GVMain","Exclude","Width","50")
	gui.Form.gsCustom.SetColumnProperty("GVMain","CK_Date","Width","65")
	gui.Form.gsCustom.SetColumnProperty("GVMain","Amount","Width","55")
	'Header
	gui.Form.gsCustom.SetColumnProperty("GVMain","Exclude","HeaderHAlignment","Center")
	gui.Form.gsCustom.SetColumnProperty("GVMain","Amount","HeaderHAlignment","far")
	'Caption
	gui.Form.gsCustom.SetColumnProperty("GVMain","Vend_No","Caption","Vendor")
	gui.Form.gsCustom.SetColumnProperty("GVMain","CourrierCode","Caption","Courrier Code")
	gui.Form.gsCustom.SetColumnProperty("GVMain","CK_Date","Caption","Check Date")
	gui.Form.gsCustom.SetColumnProperty("GVMain","Check_Num","Caption","Check Number")
	
	'Custom date
	Gui.Form.gsCustom.SetColumnProperty("GVMain","CK_Date","DisplayCustomDatetime","d")
	gui.Form.gsCustom.MainView("GVMain")
	gui.Form..Show
	'Deactivate Controls
	gui.Form.dpDate.Enabled(False)
	gui.Form.txtCourcode.Enabled(False)
	gui.Form.txtBankAccount.Enabled(False)
	gui.Form.txtExportFolder.Enabled(False)
	gui.Form.cmdBrowseExportFolder.Enabled(False)
	gui.Form.cmdOK.Enabled(False)
	'Activate run button
	gui.Form.cmdRun.Enabled(True)

	f.Intrinsic.Control.ExitSub
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry


Program.Sub.cmdOK_Click.End

Program.Sub.cmdRun_Click.Start
f.Intrinsic.Control.Try	
	'string
	V.Local.sError.Declare
	v.Local.sSQL.Declare	
	V.local.sExport.declare
	v.Local.sFile.Declare
	v.Local.sMsg.Declare
	V.Local.sDateSelected.Declare
	v.Local.sDateSubmitted.Declare
	v.Local.sInvoiceDate.Declare
	V.Local.sAmountCheck.Declare
	v.Local.sAmountInvoice.Declare
	v.Local.sCheckNum.Declare
	v.Local.sZip.Declare
	v.Local.sCourrierCode.Declare
	v.Local.sInvoiceNote.Declare
	v.Local.sTransID.Declare
	v.Local.sPipeCharacter.Declare
	v.Local.bContainsCommas.Declare
	v.Local.sPipeCharacter2.Declare
	v.Local.bContainsCommas2.Declare
	'long
	v.Local.iCnt.Declare
	v.Local.iInvoice.Declare
	v.Local.iLineNum.Declare
	'float
	v.Local.fTotal.Declare	
	
	'Generate Dictionary (CK_No, courrierCode)
	f.Data.Dictionary.CreateFromDataTable("CourrierCodeDict","PreT","CK_No","CourrierCode")
	f.Data.Dictionary.SetDefaultReturn("CourrierCodeDict","")
	'Generate Dictionary (Invoice,Text)
	f.Data.Dictionary.CreateFromSQL("InvNoteDict","conx","Select Distinct Invoice,Text from V_AP_INVC_NOTES")
	f.Data.Dictionary.SetDefaultReturn("InvNoteDict","")
	'Generate Dictionary (Invoice,Text)
	f.Data.Dictionary.CreateFromDataTable("ExcludeDict","PreT","CK_No","Exclude")
	f.Data.Dictionary.SetDefaultReturn("ExcludeDict",False)
	
	f.Intrinsic.UI.InvokeWaitDialog("Processing...")
	gui.Form..Visible(false)
	
	'format date
	F.Intrinsic.String.Format(V.Screen.Form!dpDate.Value,"YYYY-MM-DD",V.Local.sDateSelected)	
	F.Intrinsic.String.Format(v.Ambient.Date,"MMDDYYYY",V.Local.sDateSubmitted)
	f.Intrinsic.String.Build("{0}\{1}_Select_{2}_Submit_{3}_{4}.csv",v.Screen.Form!txtExportFolder.Text.Trim,v.Caller.CompanyCode,v.Local.sDateSelected,v.Ambient.Date.FormatYYYYMMDD,v.Ambient.Now.FormatHhNnSs,v.Local.sFile)
	
	'1/File Header record
	f.Intrinsic.String.Build("FILHDR,INBOX,,{0},,",V.Local.sDateSubmitted,V.Local.sExport)
	f.Intrinsic.Math.Add(v.Local.iLineNum,1,v.Local.iLineNum)
	
	'select data for correct date and account number
	F.intrinsic.string.Build("select Ck_Date, Ck_No,Ck_Or_Void, Acct_No,v.Name_Vendor_pay as Payee, Amount, Vend_No,ADDRESS1_PAY as Address1,ADDRESS2_PAY as Address2,CITY_PAY as City,STATE_PAY as State,CODE_ZIP_PAY as Code_Zip,COUNTRY_PAY as Country from V_CHECKS_LOG c left join v_Vendor_Pay_To v on c.Vend_no = v.Vendor where CK_DATE= '{0}' and Ck_Or_Void = 'C' order by CK_NO",v.Local.sDateSelected,V.Local.sSQL)
	
	f.Intrinsic.Control.If(v.DataTable.T.Exists)
		f.Data.DataTable.Close("T")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("T","conx",v.Local.sSQL,True)
	
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.T.RowCount--,1)
	
		'Only process the non-exclude checks
		f.Intrinsic.Control.If(v.Dictionary.ExcludeDict![v.DataTable.T(v.Local.iCnt).Ck_No!FieldValString],=,False)
			f.Intrinsic.String.Build("Select check_num,date_check,check_desc,vendor,invoice,batch_code,batch_num,batch_line,Date_batch,Date_invoice,amt_invoice,amt_transaction,discount_invoice,purchase_order,receiver from v_AP_Open_items where vendor = '{0}' and batch_code = '11'and check_num = '{1}'",v.DataTable.T(v.Local.iCnt).Vend_No!FieldValTrim,v.DataTable.T(v.Local.iCnt).Ck_No!FieldValString,v.Local.sSQL)
			f.Intrinsic.Control.If(v.DataTable.Inv.Exists)
				f.Data.DataTable.Close("Inv")
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.CreateFromSQL("Inv","conx",v.Local.sSQL,True)
			f.Data.DataTable.Compute("Inv","Sum([amt_transaction])","",v.Local.fTotal)
			'Checking mismatch of check amount and total of invoice amount
	'commented this out due to discount issues
'			f.Intrinsic.Control.If(v.Local.fTotal,<>,v.DataTable.T(v.Local.iCnt).Amount!FieldValFloat)
'				f.Intrinsic.Control.For(v.Local.iInvoice,0,v.DataTable.Inv.RowCount--,1)	
'					f.Intrinsic.String.Build("{0}{1}Invoice: {2} Amount: ${3}",v.Local.sMsg,v.Ambient.NewLine,v.DataTable.Inv(v.Local.iInvoice).Invoice!FieldValTrim,v.DataTable.Inv(v.Local.iInvoice).Amt_Invoice!FieldValFloat,v.Local.sMsg)
'				f.Intrinsic.Control.Next(v.Local.iInvoice)	
'				f.Intrinsic.String.Build("Check number {0} - Amount ${1} is not equal to Total of Invoice Amount{2}",v.DataTable.T(v.Local.iCnt).CK_No!FieldValString,v.DataTable.T(v.Local.iCnt).Amount!FieldValFloat,v.Local.sMsg,v.Local.sMsg)
'				f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Error")
'				f.Intrinsic.Control.CallSub("Unload")	
'			f.Intrinsic.Control.EndIf	
		
			'2/Payment header Record
			f.Intrinsic.String.Format(v.DataTable.T(v.Local.iCnt).Amount!FieldValFloat,"#.00",v.Local.sAmountCheck)		
			f.Intrinsic.String.LPad(v.DataTable.T(v.Local.iCnt).Ck_No!FieldValString,"0",9,v.Local.sCheckNum)
			'Courrier Code
			'Grabe the dynamic Trans code from the custom table
			v.Local.sSQL.Set("SELECT * FROM GCG_XXXX_POS_PAY_TRANSID")
			F.ODBC.Connection!CONX.EXECUTEANDRETURN(V.Local.sSQL,V.Local.sTransID)
			v.Local.sCourrierCode.Set(v.Dictionary.CourrierCodeDict![v.DataTable.T(v.Local.iCnt).CK_No!FieldValString])
			f.Intrinsic.String.Build("{0}{1}PMTHDR,{2},{8},{3},{4},{5},{6}{7},",v.Local.sExport,v.Ambient.NewLine,v.Local.sCourrierCode.Left8,v.Local.sDateSubmitted,v.Local.sAmountCheck,v.Screen.Form!txtBankAccount.Text.Trim,v.Global.sPrefixCheck,v.Local.sCheckNum,v.Local.sTransID,v.Local.sExport)		
				
			'pipe record only if there is a comma in the string
			f.Intrinsic.String.IsInString(v.DataTable.T(v.Local.iCnt).Payee!FieldValTrim,",",True,v.Local.bContainsCommas)
			f.Intrinsic.Control.If(v.Local.bContainsCommas)
				v.Local.sPipeCharacter("|")
			f.Intrinsic.Control.Else
				v.Local.sPipeCharacter("")
			f.Intrinsic.Control.EndIf
			
			'3/Payee name Record
			f.Intrinsic.String.Build("{0}{1}PAYENM,{4}{2}{4},,{3},",v.Local.sExport,v.Ambient.NewLine,v.DataTable.T(v.Local.iCnt).Payee!FieldValTrim,v.DataTable.T(v.Local.iCnt).Vend_No!FieldValTrim,v.Local.sPipeCharacter,v.Local.sExport)	
			
			'pipe record only if there is a comma in the string
			f.Intrinsic.String.IsInString(v.DataTable.T(v.Local.iCnt).Address1!FieldValTrim,",",True,v.Local.bContainsCommas)
			f.Intrinsic.Control.If(v.Local.bContainsCommas)
				v.Local.sPipeCharacter("|")
			f.Intrinsic.Control.Else
				v.Local.sPipeCharacter("")
			f.Intrinsic.Control.EndIf
			
			'pipe record 2 only if there is a comma in the string
			f.Intrinsic.String.IsInString(v.DataTable.T(v.Local.iCnt).Address2!FieldValTrim,",",True,v.Local.bContainsCommas2)
			f.Intrinsic.Control.If(v.Local.bContainsCommas2)
				v.Local.sPipeCharacter2("|")
			f.Intrinsic.Control.Else
				v.Local.sPipeCharacter2("")
			f.Intrinsic.Control.EndIf
			
			'4/Payee Address Record
			f.Intrinsic.String.Build("{0}{1}PYEADD,{4}{2}{4},{5}{3}{5},,",v.Local.sExport,v.Ambient.NewLine,v.DataTable.T(v.Local.iCnt).Address1!FieldValTrim,v.DataTable.T(v.Local.iCnt).Address2!FieldValTrim,v.Local.sPipeCharacter,v.Local.sPipeCharacter2,v.Local.sExport)		
			'5/Additional Payee Address Record 
			f.Intrinsic.String.Build("{0}{1}ADDPYE,,,",v.Local.sExport,v.Ambient.NewLine,v.Local.sExport)			
			'6/Payee Postal Record
			f.Intrinsic.String.Left(v.DataTable.T(v.Local.iCnt).Code_Zip!FieldValTrim,10,v.Local.sZip)
			f.Intrinsic.String.Build("{0}{1}PYEPOS,{2},{3},{4},{5},",v.Local.sExport,v.Ambient.NewLine,v.DataTable.T(v.Local.iCnt).City!FieldValTrim,v.DataTable.T(v.Local.iCnt).State!FieldValTrim,v.Local.sZip,v.DataTable.T(v.Local.iCnt).Country!FieldValTrim,v.Local.sExport)
			'Add line number
			f.Intrinsic.Math.Add(v.Local.iLineNum,5,v.Local.iLineNum)
			
			'6/Remittance Detail
			f.Intrinsic.Control.For(v.Local.iInvoice,0,v.DataTable.Inv.RowCount--,1)			
				f.Intrinsic.String.Format(v.DataTable.Inv(v.Local.iInvoice).Date_Invoice!FieldVal,"MMDDYYYY",v.Local.sInvoiceDate)
				f.Intrinsic.String.Format(v.DataTable.Inv(v.Local.iInvoice).Amt_Transaction!FieldValFloat,"#.00",v.Local.sAmountInvoice)
				
				'pipe record only if there is a comma in the string
				f.Intrinsic.String.IsInString(v.DataTable.Inv(v.Local.iInvoice).Invoice!FieldValTrim,",",True,v.Local.bContainsCommas)
				f.Intrinsic.Control.If(v.Local.bContainsCommas)
					v.Local.sPipeCharacter("|")
				f.Intrinsic.Control.Else
					v.Local.sPipeCharacter("")
				f.Intrinsic.Control.EndIf
				
				'pipe record 2 only if there is a comma in the string
				f.Intrinsic.String.IsInString(v.Local.sInvoiceNote.Left30,",",True,v.Local.bContainsCommas2)
				f.Intrinsic.Control.If(v.Local.bContainsCommas2)
					v.Local.sPipeCharacter2("|")
				f.Intrinsic.Control.Else
					v.Local.sPipeCharacter2("")
				f.Intrinsic.Control.EndIf
				
				'Invoice note
				v.Local.sInvoiceNote.Set(v.Dictionary.InvNoteDict![v.DataTable.Inv(v.Local.iInvoice).Invoice!FieldValString])
				f.Intrinsic.String.Build("{0}{1}RMTDTL,{6}{2}{6},{7}{3}{7},{4},{5},{5},0,",v.Local.sExport,v.Ambient.NewLine,v.DataTable.Inv(v.Local.iInvoice).Invoice!FieldValTrim,v.Local.sInvoiceNote.Left30,v.Local.sInvoiceDate,v.Local.sAmountInvoice,v.Local.sPipeCharacter,v.Local.sPipeCharacter2,v.Local.sExport)
				f.Intrinsic.Math.Add(v.Local.iLineNum,1,v.Local.iLineNum)
			f.Intrinsic.Control.Next(v.Local.iInvoice)			
		f.Intrinsic.Control.EndIf	

	f.Intrinsic.Control.Next(v.Local.iCnt)	
	'7/Trailer
	f.Intrinsic.Math.Add(v.Local.iLineNum,1,v.Local.iLineNum)
	f.Intrinsic.String.Build("{0}{1}FILTRL,{2},",v.Local.sExport,v.Ambient.NewLine,v.Local.iLineNum,v.Local.sExport)	
	
	'Write file
	f.Intrinsic.File.String2File(v.Local.sFile,v.Local.sExport)
	
	'Msg Done and unload
	f.Intrinsic.UI.CloseWaitDialog	
	f.Intrinsic.String.Build("Generated file {0}",v.Local.sFile,v.Local.sMsg)
	f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Done")
	F.Intrinsic.Control.CallSub("Unload")

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry

Program.Sub.cmdRun_Click.End

Program.Sub.Form_UnLoad.Start
f.Intrinsic.Control.CallSub("Unload")
Program.Sub.Form_UnLoad.End

Program.Sub.UnLoad.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare

	F.Intrinsic.Control.If(V.ODBC.conx.State,=,1)
		F.ODBC.Connection!conx.close
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	f.Intrinsic.String.Build("Subroutine Error {0}{0}Subroutine: {1}{0}Error Occurred {2} with description {3}",V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End	
F.Intrinsic.Control.EndTry
Program.Sub.UnLoad.End

Program.Sub.cmdBrowseExportFolder_Click.Start
'Browse Export Folder
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sPath.Declare
	
	F.Intrinsic.UI.FolderBrowser("Select Folder for Path",V.Local.sPath)
	f.Intrinsic.Control.If(v.Local.sPath.IsCancel,=,False)
		gui.Form.txtExportFolder.Text(v.Local.sPath)
	f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	f.Intrinsic.String.Build("Subroutine Error {0}{0}Subroutine: {1}{0}Error Occurred {2} with description {3}",V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End	
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrowseExportFolder_Click.End

Program.Sub.Comments.Start
Program.Sub.Comments.End